/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.4
 * Generated at: 2025-03-22 17:56:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.ArrayList;
import java.util.UUID;
import java.time.format.DateTimeFormatter;
import uk.ac.ucl.model.*;

public final class displaySearch_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_packages.add("uk.ac.ucl.model");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("java.time.format.DateTimeFormatter");
    _jspx_imports_classes.add("java.util.UUID");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

  NoteHandler noteHandler = ModelFactory.getModel().getNoteHandler();
  CategoryHandler categoryHandler = ModelFactory.getModel().getCategoryHandler();
  IndexHandler indexHandler = ModelFactory.getModel().getIndexHandler();

  UUID indexID = request.getParameter("indexID") == null || request.getParameter("indexID").equals("null") ? indexHandler.getHomeIndex() : UUID.fromString(request.getParameter("indexID"));

  String query = request.getParameter("query");

  ArrayList<UUID> searchResults = noteHandler.searchQueryInNotes(query);

      out.write("\n");
      out.write("\n");
      out.write("<div class=\"container mt-4\">\n");
      out.write("  <h2 class=\"mb-3\">My Notes</h2>\n");
      out.write("\n");
      out.write("  <div class=\"d-flex gap-2 mb-3\">\n");
      out.write("    <h4 class=\"mb-0\">\n");
      out.write("      Search Results: \"");
      out.print( query );
      out.write("\"\n");
      out.write("    </h4>\n");
      out.write("\n");
      out.write("    <div class=\"ms-auto\">\n");
      out.write("      <form action=\"index.jsp\" method=\"get\" class=\"d-flex\" role=\"search\">\n");
      out.write("        <input type=\"hidden\" name=\"action\" value='search'>\n");
      out.write("        <input type=\"hidden\" name=\"indexID\" value='");
      out.print( indexID );
      out.write("'>\n");
      out.write("        <input class=\"form-control me-2\" type=\"search\" name=\"query\" placeholder=\"Search...\" aria-label=\"Search\">\n");
      out.write("        <button class=\"btn btn-outline-secondary\" type=\"submit\">Search</button>\n");
      out.write("      </form>\n");
      out.write("    </div>\n");
      out.write("  </div>\n");
      out.write("\n");
      out.write("  <h5>");
      out.print( searchResults.size() );
      out.write(" Found </h5>\n");
      out.write("\n");
      out.write("  ");
 if (searchResults.isEmpty()) { 
      out.write("\n");
      out.write("    <p class=\"text-muted\">No matches found...</p>\n");
      out.write("  ");
 } else { 
      out.write("\n");
      out.write("    <table class=\"table table-striped\">\n");
      out.write("      <thead>\n");
      out.write("        <tr>\n");
      out.write("          <th>Title</th>\n");
      out.write("          <th>Type</th>\n");
      out.write("          <th>Path</th>\n");
      out.write("        </tr>\n");
      out.write("      </thead>\n");
      out.write("      <tbody>\n");
      out.write("        ");
 for (UUID element : searchResults) {
          Note note = noteHandler.getContentFromID(element);
          UUID noteParentIndex = indexHandler.getIndexToWhichNoteBelongs(note.getID());
          ArrayList<Index> indexPath = indexHandler.getIndexPath(noteParentIndex);
        
      out.write("\n");
      out.write("          <tr>\n");
      out.write("            <td>\n");
      out.write("              <a href=\"editNote.jsp?id=");
      out.print( note.getID() );
      out.write("&indexID=");
      out.print( noteParentIndex );
      out.write("\" class=\"text-decoration-none\">\n");
      out.write("                <i class=\"bi bi-file-earmark-text\"></i> ");
      out.print( note.getTitle() );
      out.write("\n");
      out.write("              </a>\n");
      out.write("            </td>\n");
      out.write("\n");
      out.write("            <td>\n");
      out.write("              <i class=\"bi bi-file-earmark-text\"></i> Note\n");
      out.write("            </td>\n");
      out.write("\n");
      out.write("            <td>\n");
      out.write("              <a href=\"index.jsp?indexID=");
      out.print( noteParentIndex );
      out.write("\" class=\"text-decoration-none\">\n");
      out.write("                ");
 for(Index noteIndex : indexPath) { 
      out.write("\n");
      out.write("                  ");
      out.print( noteIndex.getName() );
      out.write(" >\n");
      out.write("                ");
 } 
      out.write("\n");
      out.write("                ");
      out.print( note.getTitle() );
      out.write("\n");
      out.write("              </a>\n");
      out.write("            </td>\n");
      out.write("          </tr>\n");
      out.write("        ");
 } 
      out.write("\n");
      out.write("      </tbody>\n");
      out.write("    </table>\n");
      out.write("  ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("  <div class=\"d-flex gap-2\">\n");
      out.write("    <div class=\"mt-3\">\n");
      out.write("      <a href=\"index.jsp?indexID=");
      out.print( indexID );
      out.write("\" class=\"btn btn-secondary\">Go Back</a>\n");
      out.write("    </div>\n");
      out.write("  </div>\n");
      out.write("</div>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
